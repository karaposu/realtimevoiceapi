# RealtimeVoiceAPI - Production-Ready Python Package for Realtime Voice APIs

A high-performance Python framework for building realtime voice applications with OpenAI's Realtime API and beyond.

## Key Features

- **Built from scratch for low latency** - Sub-50ms response times in fast lane mode
- **Native VAD and multimodal support** - Hardware-level audio capture with voice activity detection
- **Dual-lane architecture** - Fast lane for conversations, big lane for intelligent processing
- **Context-aware dynamic switching** - Seamlessly switch between fast/big lanes based on conversation context
- **Lightweight abstractions** - Clean, minimal API that doesn't get in your way

## Installation

```bash
pip install rtvoicechatengine
```

## Quick Start

### CLI Demo
```bash
voicechatdemo
```

### Basic Usage
```python
from rtvoicechatengine import VoiceEngine

engine = VoiceEngine(api_key="your-api-key")
engine.on_text_response = lambda text: print(f"AI: {text}")

await engine.connect()
await engine.start_listening()
```

### Advanced Usage with Dynamic Switching
```python
from rtvoicechatengine import VoiceEngine, VoiceEngineConfig

config = VoiceEngineConfig(
    api_key="your-api-key",
    strategy_mode="dynamic",
    switch_triggers={
        "function_calls": True,
        "keywords": ["calculate", "search", "weather"]
    }
)

engine = VoiceEngine(config)

# Fast lane for chat, automatically switches to big lane for tools
# User: "Hi there" → Fast lane (30ms)
# User: "Calculate 24 * 365" → Big lane (runs calculation) → Fast lane
# User: "Thanks!" → Fast lane (30ms)
```

## Architecture

### Fast Lane
- Direct audio path with minimal processing
- <50ms end-to-end latency
- Energy-based VAD
- Pre-allocated buffers

### Big Lane
- Full audio processing pipeline
- Event-driven architecture
- Tool/function calling support
- Multimodal capabilities

### Dynamic Switching
- Automatic context detection
- Seamless state transfer
- No conversation interruption
- Configurable triggers

## Performance

| Mode | Latency | Use Case |
|------|---------|----------|
| Fast Lane | <50ms | General conversation |
| Big Lane | 100-200ms | Tool calls, complex processing |
| Switching | ~10ms | Seamless transition |

## Configuration

```python
VoiceEngineConfig(
    # Core settings
    api_key="your-api-key",
    provider="openai",  # or "anthropic", "google"
    
    # Audio settings
    sample_rate=24000,
    chunk_duration_ms=100,
    
    # VAD settings
    vad_enabled=True,
    vad_threshold=0.02,
    
    # Dynamic switching
    strategy_mode="dynamic",  # or "fast_only", "big_only"
    switch_threshold_ms=100,
    switch_cooldown_ms=500,
    
    # Big lane features
    enable_transcription=False,
    enable_functions=False,
)
```

## Examples

### Voice Assistant with Tools
```python
# Define tools
tools = [
    {
        "name": "get_weather",
        "description": "Get weather for a location",
        "parameters": {...}
    }
]

engine = VoiceEngine(
    api_key="your-api-key",
    tools=tools
)

# Handles tool calls automatically with lane switching
```

### Custom Business Logic
```python
@engine.on_function_call("calculate_invoice")
async def handle_invoice(params):
    # Big lane processes this
    result = await calculate_invoice_total(params)
    return result
    # Switches back to fast lane after
```

## Monitoring

```python
metrics = engine.get_metrics()
print(f"Fast lane usage: {metrics.fast_lane_percent}%")
print(f"Average latency: {metrics.avg_latency_ms}ms")
print(f"Lane switches: {metrics.switch_count}")
```

## Requirements

- Python 3.8+
- NumPy (optional, for advanced audio processing)
- WebSockets

## License

MIT

## Contributing

We welcome contributions! See [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## Support

- Documentation: [docs.rtvoicechat.dev](https://docs.rtvoicechat.dev)
- Issues: [GitHub Issues](https://github.com/yourorg/rtvoicechatengine/issues)
- Discord: [Join our community](https://discord.gg/rtvoicechat)